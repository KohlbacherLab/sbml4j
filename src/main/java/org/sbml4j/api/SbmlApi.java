/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech) (5.3.1). https://openapi-generator.tech Do
 * not edit the class manually.
 */
package org.sbml4j.api;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.sbml4j.model.api.entityInfo.EntityInfoItem;
import org.sbml4j.model.api.entityInfo.IdItem;
import org.sbml4j.model.api.network.NodeList;
import org.sbml4j.model.api.pathway.PathwayInventoryItem;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.
Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
          date = "2022-04-02T23:09:46.842042+02:00[Europe/Berlin]")
@Validated
@Api(value = "Sbml", description = "the Sbml API")
public interface SbmlApi {

  default Optional<NativeWebRequest> getRequest() { return Optional.empty(); }

  /**
   * GET /entityInfo : Information about given entity, or entities with
   * relation- and reaction information
   *
   * @param geneSymbol The geneSymbol for which the info should be fetched, can
   *     process multiple comma-separated symbols (required)
   * @return Bad Request (status code 400)
   *         or successful operation (status code 200)
   */

  @ApiOperation(
      value =
          "Information about given entity, or entities with relation- and reaction information",
      nickname = "getEntityInfo", notes = "", response = EntityInfoItem.class,
      responseContainer = "List",
      tags =
          {
              "sbml",
          })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Bad Request")
                  ,

                      @ApiResponse(code = 200, message = "successful operation",
                                   response = EntityInfoItem.class,
                                   responseContainer = "List")
                })
  @RequestMapping(method = RequestMethod.GET, value = "/entityInfo",
                  produces = {"application/json"})
  default ResponseEntity<List<EntityInfoItem>>
  getEntityInfo(@NotNull @ApiParam(
      value =
          "The geneSymbol for which the info should be fetched, can process multiple comma-separated symbols",
      required = true) @Valid @RequestParam(value = "geneSymbol",
                                            required = true) String geneSymbol

  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"gene\" : \"BRAF\", \"qualifier\" : [ { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] }, { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] } ], \"secondary names\" : [ \"MAPK21A\", \"MAPK21A\" ], \"pathways\" : [ { \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\", \"KEGGId\" : \"path_hsa04066\", \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\" }, { \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\", \"KEGGId\" : \"path_hsa04066\", \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\" } ], \"reactions\" : [ { \"catalysts\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"sboTerm\" : \"sboTerm\", \"reversible\" : false, \"reactants\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"name\" : \"rn:R04125\", \"type\" : \"biochemical reaction\", \"products\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ] }, { \"catalysts\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"sboTerm\" : \"sboTerm\", \"reversible\" : false, \"reactants\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"name\" : \"rn:R04125\", \"type\" : \"biochemical reaction\", \"products\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ] } ], \"relations\" : [ { \"sboTerm\" : \"SBO:0000170\", \"name\" : \"MAP2K\", \"type\" : \"stimulation\", \"direction\" : \"out\" }, { \"sboTerm\" : \"SBO:0000170\", \"name\" : \"MAP2K\", \"type\" : \"stimulation\", \"direction\" : \"out\" } ] }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /entityInfo : Batch-Processing for information about given entity, or
   * entities with relation- and reaction information
   *
   * @param requestBody A json formatted and comma separated list of genes in
   *     the set to be analysed (required)
   * @return Bad Request (status code 400)
   *         or successful operation (status code 200)
   */

  @ApiOperation(
      value =
          "Batch-Processing for information about given entity, or entities with relation- and reaction information",
      nickname = "getEntityInfoBatch", notes = "",
      response = EntityInfoItem.class, responseContainer = "List",
      tags =
          {
              "sbml",
          })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Bad Request")
                  ,

                      @ApiResponse(code = 200, message = "successful operation",
                                   response = EntityInfoItem.class,
                                   responseContainer = "List")
                })
  @RequestMapping(method = RequestMethod.POST, value = "/entityInfo",
                  produces = {"application/json"},
                  consumes = {"application/json"})
  default ResponseEntity<List<EntityInfoItem>>
  getEntityInfoBatch(

      @ApiParam(
          value =
              "A json formatted and comma separated list of genes in the set to be analysed",
          required = true) @Valid @RequestBody List<String> requestBody) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"gene\" : \"BRAF\", \"qualifier\" : [ { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] }, { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] } ], \"secondary names\" : [ \"MAPK21A\", \"MAPK21A\" ], \"pathways\" : [ { \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\", \"KEGGId\" : \"path_hsa04066\", \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\" }, { \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\", \"KEGGId\" : \"path_hsa04066\", \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\" } ], \"reactions\" : [ { \"catalysts\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"sboTerm\" : \"sboTerm\", \"reversible\" : false, \"reactants\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"name\" : \"rn:R04125\", \"type\" : \"biochemical reaction\", \"products\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ] }, { \"catalysts\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"sboTerm\" : \"sboTerm\", \"reversible\" : false, \"reactants\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ], \"name\" : \"rn:R04125\", \"type\" : \"biochemical reaction\", \"products\" : [ { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" }, { \"sboTerm\" : \"sboTerm\", \"name\" : \"C20H22N7O6\", \"type\" : \"compound\" } ] } ], \"relations\" : [ { \"sboTerm\" : \"SBO:0000170\", \"name\" : \"MAP2K\", \"type\" : \"stimulation\", \"direction\" : \"out\" }, { \"sboTerm\" : \"SBO:0000170\", \"name\" : \"MAP2K\", \"type\" : \"stimulation\", \"direction\" : \"out\" } ] }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /idMap : Get the known ID Mappings for the given names
   *
   * @param symbol The symbol, or symbols to find idMappings for (required)
   * @param separator A custom separator character for separting multiple input
   *     symbols. Default is &#39;,&#39; (optional, default to ,)
   * @param idSystem Limit the id systems to extract. All available ids are
   *     extracted if ommitted. (optional)
   * @return Bad Request (status code 400)
   *         or successful operation (status code 200)
   */

  @ApiOperation(value = "Get the known ID Mappings for the given names",
                nickname = "getIdMap", notes = "", response = IdItem.class,
                responseContainer = "List",
                tags =
                    {
                        "sbml",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Bad Request")
                  ,

                      @ApiResponse(code = 200, message = "successful operation",
                                   response = IdItem.class,
                                   responseContainer = "List")
                })
  @RequestMapping(method = RequestMethod.GET, value = "/idMap",
                  produces = {"application/json"})
  default ResponseEntity<List<IdItem>>
  getIdMap(
      @NotNull
      @ApiParam(value = "The symbol, or symbols to find idMappings for",
                required = true) @Valid
      @RequestParam(value = "symbol", required = true) String symbol

      ,
      @ApiParam(
          value =
              "A custom separator character for separting multiple input symbols. Default is ','",
          defaultValue = ",") @Valid
      @RequestParam(value = "separator", required = false,
                    defaultValue = ",") String separator

      ,
      @ApiParam(
          value =
              "Limit the id systems to extract. All available ids are extracted if ommitted.")
      @Valid @RequestParam(value = "idSystem", required = false) String idSystem

  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"gene\" : \"BRAF\", \"qualifier\" : [ { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] }, { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] } ], \"secondary names\" : [ \"MAPK21A\", \"MAPK21A\" ] }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /idMap : Get the known ID Mappings for the given names
   *
   * @param nodeList The symbols for which the id mapping should be fetched
   *     (required)
   * @param idSystem Limit the id systems to extract. All available ids are
   *     extracted if ommitted. (optional)
   * @return Bad Request (status code 400)
   *         or successful operation (status code 200)
   */

  @ApiOperation(value = "Get the known ID Mappings for the given names",
                nickname = "getIdMapBatch", notes = "", response = IdItem.class,
                responseContainer = "List",
                tags =
                    {
                        "sbml",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Bad Request")
                  ,

                      @ApiResponse(code = 200, message = "successful operation",
                                   response = IdItem.class,
                                   responseContainer = "List")
                })
  @RequestMapping(method = RequestMethod.POST, value = "/idMap",
                  produces = {"application/json"},
                  consumes = {"application/json"})
  default ResponseEntity<List<IdItem>>
  getIdMapBatch(

      @ApiParam(
          value = "The symbols for which the id mapping should be fetched",
          required = true) @Valid @RequestBody NodeList nodeList,
      @ApiParam(
          value =
              "Limit the id systems to extract. All available ids are extracted if ommitted.")
      @Valid @RequestParam(value = "idSystem", required = false) String idSystem

  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"gene\" : \"BRAF\", \"qualifier\" : [ { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] }, { \"name\" : \"entrez-gene\", \"content\" : [ { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" }, { \"values\" : [ { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" }, { \"identifier\" : \"hsa:10152\", \"url\" : \"http://example.com/aeiou\" } ], \"type\" : \"BQB_HAS_VERSION\" } ] } ], \"secondary names\" : [ \"MAPK21A\", \"MAPK21A\" ] }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /sbml : Upload SBML Model to create a Pathway
   *
   * @param organism The three-letter organism code (required)
   * @param source The name of the source this SBML originates from (required)
   * @param version The version of the source this SBML originates from
   *     (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param files  (optional)
   * @return Pathways from models created (status code 201)
   *         or Bad Request (status code 400)
   */

  @ApiOperation(value = "Upload SBML Model to create a Pathway",
                nickname = "uploadSBML", notes = "",
                response = PathwayInventoryItem.class,
                responseContainer = "List",
                tags =
                    {
                        "sbml",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 201,
                               message = "Pathways from models created",
                               response = PathwayInventoryItem.class,
                               responseContainer = "List")
                  ,

                      @ApiResponse(code = 400, message = "Bad Request")
                })
  @RequestMapping(method = RequestMethod.POST, value = "/sbml",
                  produces = {"application/json"},
                  consumes = {"multipart/form-data"})
  default ResponseEntity<List<PathwayInventoryItem>>
  uploadSBML(
      @NotNull @ApiParam(value = "The three-letter organism code",
                         required = true) @Valid
      @RequestParam(value = "organism", required = true) String organism

      ,
      @NotNull
      @ApiParam(value = "The name of the source this SBML originates from",
                required = true) @Valid
      @RequestParam(value = "source", required = true) String source

      ,
      @NotNull
      @ApiParam(value = "The version of the source this SBML originates from",
                required = true) @Valid
      @RequestParam(value = "version", required = true) String version

      ,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,

      @ApiParam(value = "") @Valid @RequestPart(value = "files",
                                                required = false)
      List<MultipartFile> files) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"transitionTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Pathway\", \"organismCode\" : \"hsa\", \"numberOfTransitions\" : 6, \"numberOfNodes\" : 0, \"numberOfReactions\" : 1, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"pathwayId\" : \"path_hsa05225\", \"compartments\" : [ \"Cytosol\", \"Cytosol\" ] }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
