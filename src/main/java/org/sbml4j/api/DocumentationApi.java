/**
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech) (5.0.1). https://openapi-generator.tech Do
 * not edit the class manually.
 */
package org.sbml4j.api;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.servlet.view.RedirectView;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.
Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
          date = "2021-03-26T12:09:15.257519+01:00[Europe/Berlin]")
@Validated
@Api(value = "Documentation", description = "the Documentation API")
public interface DocumentationApi {

  default Optional<NativeWebRequest> getRequest() { return Optional.empty(); }

  /**
   * GET /help : Show the API help
   *
   * @return successful operation (status code 200)
   */
  @ApiOperation(value = "Show the API help", nickname = "getBaseDocumentation",
                notes = "", response = Object.class,
                tags =
                    {
                        "documentation",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 200, message = "successful operation",
                               response = Object.class)
                })
  @GetMapping(value = "/api", produces = {"text/html"})
  default RedirectView
  getBaseDocumentation() {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
          String exampleString = "";
          ApiUtil.setExampleResponse(request, "", exampleString);
          break;
        }
      }
    });
    return new RedirectView(null);//(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /dbStatus : Get the status of the connected database
   *
   * @return successful operation (status code 200)
   */
  @ApiOperation(value = "Get the status of the connected database",
                nickname = "getDbStatus", notes = "", response = String.class,
                tags =
                    {
                        "documentation",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 200, message = "successful operation",
                               response = String.class)
                })
  @GetMapping(value = "/dbStatus", produces = {"application/json"})
  default ResponseEntity<String>
  getDbStatus() {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString = "\"Database operational\"";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /profile : Get the active profile of sbml4j running
   *
   * @return successful operation (status code 200)
   */
  @ApiOperation(value = "Get the active profile of sbml4j running",
                nickname = "getProfile", notes = "", response = String.class,
                responseContainer = "List",
                tags =
                    {
                        "documentation",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 200, message = "successful operation",
                               response = String.class,
                               responseContainer = "List")
                })
  @GetMapping(value = "/profile", produces = {"application/json"})
  default ResponseEntity<List<String>>
  getProfile() {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString = "\"test\"";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /version : Get the version of sbml4j running
   *
   * @return successful operation (status code 200)
   */
  @ApiOperation(value = "Get the version of sbml4j running",
                nickname = "getVersion", notes = "", response = String.class,
                tags =
                    {
                        "documentation",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 200, message = "successful operation",
                               response = String.class)
                })
  @GetMapping(value = "/version", produces = {"application/json"})
  default ResponseEntity<String>
  getVersion() {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString = "\"v0.2.0\"";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
