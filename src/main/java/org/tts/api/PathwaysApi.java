/*
 * ----------------------------------------------------------------------------
	Copyright 2020 University of Tuebingen 	

	This file is part of SBML4j.

    SBML4j is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SBML4j is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SBML4j.  If not, see <https://www.gnu.org/licenses/>.
 * ---------------------------------------------------------------------------- 
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tts.api;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.tts.model.api.PathwayCollectionCreationItem;
import org.tts.model.api.PathwayInventoryItem;
import org.tts.model.api.WarehouseInventoryItem;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-28T10:58:57.976Z[GMT]")
@Api(value = "Pathways", description = "the Pathways API")
public interface PathwaysApi {

    Logger log = LoggerFactory.getLogger(PathwaysApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Create a collectionPathway from the submitted pathways", nickname = "createPathwayCollection", notes = "", response = UUID.class, tags={ "pathways", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "CollectionPathway created", response = UUID.class),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/pathwayCollection",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UUID> createPathwayCollection(@ApiParam(value = "List of pathwayUUIDs and a databaseUUID to create the collection for" ,required=true )  @Valid @RequestBody PathwayCollectionCreationItem body
,@ApiParam(value = "The user which requests the creation" ,required=true) @RequestHeader(value="user", required=true) String user
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"0d25f4b9-8dd5-4bc3-9d04-9af418302244\"", UUID.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PathwaysApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List UUIDs of available pathways", nickname = "listAllPathwayUUIDs", notes = "", response = UUID.class, responseContainer = "List", authorizations = {
        @Authorization(value = "network_auth", scopes = { 
            @AuthorizationScope(scope = "write:networks", description = "modify networks in your account"),
            @AuthorizationScope(scope = "read:networks", description = "read your networks")
            })    }, tags={ "pathways", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UUID.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/pathwayUUIDs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UUID>> listAllPathwayUUIDs(@ApiParam(value = "The user which requests listing of their pathways" ,required=true) @RequestHeader(value="user", required=true) String user
,@ApiParam(value = "Do hide Collection Pathways in the output", defaultValue = "false") @Valid @RequestParam(value = "hideCollections", required = false, defaultValue="false") Boolean hideCollections
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ \"0d25f4b9-8dd5-4bc3-9d04-9af418302244\", \"0d25f4b9-8dd5-4bc3-9d04-9af418302244\" ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PathwaysApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "List available pathways", nickname = "listAllPathways", notes = "", response = PathwayInventoryItem.class, responseContainer = "List", authorizations = {
        @Authorization(value = "network_auth", scopes = { 
            @AuthorizationScope(scope = "write:networks", description = "modify networks in your account"),
            @AuthorizationScope(scope = "read:networks", description = "read your networks")
            })    }, tags={ "pathways", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PathwayInventoryItem.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/pathways",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<PathwayInventoryItem>> listAllPathways(@ApiParam(value = "The user which requests listing of their pathways" ,required=true) @RequestHeader(value="user", required=true) String user
,@ApiParam(value = "Do hide Collection Pathways in the output", defaultValue = "false") @Valid @RequestParam(value = "hideCollections", required = false, defaultValue="false") Boolean hideCollections
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"transitionTypes\" : [ \"stimulation\", \"stimulation\" ],\n  \"name\" : \"Example Pathway\",\n  \"organismCode\" : \"hsa\",\n  \"numberOfTransitions\" : 6,\n  \"links\" : [ {\n    \"rel\" : \"graphml\",\n    \"href\" : \"http://example.com:8080/sbml4j/networks/d25f4b9-8dd5-4bc3-9d04-9af418302244?format=graphml\"\n  }, {\n    \"rel\" : \"graphml\",\n    \"href\" : \"http://example.com:8080/sbml4j/networks/d25f4b9-8dd5-4bc3-9d04-9af418302244?format=graphml\"\n  } ],\n  \"numberOfNodes\" : 0,\n  \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ],\n  \"networkMappingType\" : \"REGULATORY\",\n  \"pathwayId\" : \"path_hsa05225\",\n  \"compartments\" : [ \"Cytosol\", \"Cytosol\" ]\n}, {\n  \"transitionTypes\" : [ \"stimulation\", \"stimulation\" ],\n  \"name\" : \"Example Pathway\",\n  \"organismCode\" : \"hsa\",\n  \"numberOfTransitions\" : 6,\n  \"links\" : [ {\n    \"rel\" : \"graphml\",\n    \"href\" : \"http://example.com:8080/sbml4j/networks/d25f4b9-8dd5-4bc3-9d04-9af418302244?format=graphml\"\n  }, {\n    \"rel\" : \"graphml\",\n    \"href\" : \"http://example.com:8080/sbml4j/networks/d25f4b9-8dd5-4bc3-9d04-9af418302244?format=graphml\"\n  } ],\n  \"numberOfNodes\" : 0,\n  \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ],\n  \"networkMappingType\" : \"REGULATORY\",\n  \"pathwayId\" : \"path_hsa05225\",\n  \"compartments\" : [ \"Cytosol\", \"Cytosol\" ]\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PathwaysApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Map pathwayContents on a new network representation", nickname = "mapPathway", notes = "", response = WarehouseInventoryItem.class, tags={ "pathways", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Mapping for Pathway created", response = WarehouseInventoryItem.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/mapping/{UUID}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<WarehouseInventoryItem> mapPathway(@ApiParam(value = "The user which requests the creation" ,required=true) @RequestHeader(value="user", required=true) String user
,@ApiParam(value = "The UUID of the pathway to be mapped",required=true) @PathVariable("UUID") UUID UUID
,@NotNull @ApiParam(value = "The type of mapping to create", required = true, allowableValues = "METABOLIC, PPI, REGULATORY, SIGNALLING, PATHWAYMAPPING") @Valid @RequestParam(value = "mappingType", required = true) String mappingType
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"name\" : \"Example Mapping\",\n  \"organismCode\" : \"hsa\",\n  \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}", WarehouseInventoryItem.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PathwaysApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
