/*
 * ----------------------------------------------------------------------------
	Copyright 2020 University of Tuebingen 	

	This file is part of SBML4j.

    SBML4j is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SBML4j is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SBML4j.  If not, see <https://www.gnu.org/licenses/>.
 * ---------------------------------------------------------------------------- 
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tts.api;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.tts.model.api.GeneAnalysisItem;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-28T10:58:57.976Z[GMT]")
@Api(value = "Analysis", description = "the Analysis API")
public interface AnalysisApi {

    Logger log = LoggerFactory.getLogger(AnalysisApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Relation- and Pathway Analysis for a gene", nickname = "getGeneAnalysis", notes = "", response = GeneAnalysisItem.class, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GeneAnalysisItem.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/geneAnalysis",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GeneAnalysisItem> getGeneAnalysis(@NotNull @ApiParam(value = "The geneSymbol for which the analysis should be fetched", required = true) @Valid @RequestParam(value = "geneSymbol", required = true) String geneSymbol
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"gene\" : \"BRAF\",\n  \"pathways\" : [ {\n    \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\",\n    \"KEGGId\" : \"path_hsa04066\",\n    \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\"\n  }, {\n    \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\",\n    \"KEGGId\" : \"path_hsa04066\",\n    \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\"\n  } ],\n  \"relations\" : [ {\n    \"sboTerm\" : \"SBO:0000170\",\n    \"name\" : \"MAP2K\",\n    \"pathways\" : [ null, null ],\n    \"type\" : \"stimulation\",\n    \"direction\" : \"out\"\n  }, {\n    \"sboTerm\" : \"SBO:0000170\",\n    \"name\" : \"MAP2K\",\n    \"pathways\" : [ null, null ],\n    \"type\" : \"stimulation\",\n    \"direction\" : \"out\"\n  } ]\n}", GeneAnalysisItem.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AnalysisApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "provide a list of genes and get a network containing all genes and their respective relations", nickname = "getGeneSet", notes = "", response = Resource.class, authorizations = {
        @Authorization(value = "network_auth", scopes = { 
            @AuthorizationScope(scope = "write:networks", description = "modify networks in your account"),
            @AuthorizationScope(scope = "read:networks", description = "read your networks")
            })    }, tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Resource.class),
        @ApiResponse(code = 204, message = "Network is empty or not available"),
        @ApiResponse(code = 403, message = "The current user is forbidden from accessing this data") })
    @RequestMapping(value = "/geneSet",
        produces = { "application/octet-stream" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resource> getGeneSet(@ApiParam(value = "The user which requests the creation" ,required=true) @RequestHeader(value="user", required=true) String user
,@NotNull @ApiParam(value = "The geneSymbols for which the analysis should be fetched", required = true) @Valid @RequestParam(value = "geneSymbols", required = true) List<String> geneSymbols
,@ApiParam(value = "The UUID of the parent network to derive a new network from, if omitted the full model will be used") @Valid @RequestParam(value = "UUID", required = false) UUID UUID
,@ApiParam(value = "Boolean flag wether the resulting network-graph should be directed ", defaultValue = "false") @Valid @RequestParam(value = "directed", required = false, defaultValue="false") boolean directed
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", Resource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AnalysisApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Relation- and Pathway Analysis for a set of gene", nickname = "getGeneSetAnalysis", notes = "", response = GeneAnalysisItem.class, responseContainer = "List", tags={ "analysis", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GeneAnalysisItem.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/geneSetAnalysis",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<List<GeneAnalysisItem>> getGeneSetAnalysis(@ApiParam(value = "A json formatted and comma separated list of genes in the set to be analysed" ,required=true )  @Valid @RequestBody List<String> body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"gene\" : \"BRAF\",\n  \"pathways\" : [ {\n    \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\",\n    \"KEGGId\" : \"path_hsa04066\",\n    \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\"\n  }, {\n    \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\",\n    \"KEGGId\" : \"path_hsa04066\",\n    \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\"\n  } ],\n  \"relations\" : [ {\n    \"sboTerm\" : \"SBO:0000170\",\n    \"name\" : \"MAP2K\",\n    \"pathways\" : [ null, null ],\n    \"type\" : \"stimulation\",\n    \"direction\" : \"out\"\n  }, {\n    \"sboTerm\" : \"SBO:0000170\",\n    \"name\" : \"MAP2K\",\n    \"pathways\" : [ null, null ],\n    \"type\" : \"stimulation\",\n    \"direction\" : \"out\"\n  } ]\n}, {\n  \"gene\" : \"BRAF\",\n  \"pathways\" : [ {\n    \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\",\n    \"KEGGId\" : \"path_hsa04066\",\n    \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\"\n  }, {\n    \"name\" : \"HIF-1 signaling pathway (Homo sapiens (human))\",\n    \"KEGGId\" : \"path_hsa04066\",\n    \"KEGGUrl\" : \"https://www.kegg.jp/kegg-bin/show_pathway?org_name=hsa&mapno=00620&mapscale=&show_description=show\"\n  } ],\n  \"relations\" : [ {\n    \"sboTerm\" : \"SBO:0000170\",\n    \"name\" : \"MAP2K\",\n    \"pathways\" : [ null, null ],\n    \"type\" : \"stimulation\",\n    \"direction\" : \"out\"\n  }, {\n    \"sboTerm\" : \"SBO:0000170\",\n    \"name\" : \"MAP2K\",\n    \"pathways\" : [ null, null ],\n    \"type\" : \"stimulation\",\n    \"direction\" : \"out\"\n  } ]\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AnalysisApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
