/*
 * ----------------------------------------------------------------------------
	Copyright 2020 University of Tuebingen 	

	This file is part of SBML4j.

    SBML4j is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SBML4j is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SBML4j.  If not, see <https://www.gnu.org/licenses/>.
 * ---------------------------------------------------------------------------- 
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tts.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.tts.model.api.Drivergenes;
import org.tts.model.api.NetworkInventoryItem;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-31T14:30:58.760Z[GMT]")
@Api(value = "Vcf", description = "the Vcf API")
public interface VcfApi {

    Logger log = LoggerFactory.getLogger(VcfApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "upload a set of driver genes and get a network connecting them", nickname = "createOverviewNetwork", notes = "This endpoint creates an overview network that contains all available genes from the input gene list. The given genes will be annotated with  the boolean drivergene. The overview network will contain all available relationships between genes and metabolites that are part of the network. The endpoint returns a networkInventoryItem of the created network. It can be retrieved using the UUID in the GET /network endpoint. If baseNetworkUUID is omitted, the full model will be used. ", response = NetworkInventoryItem.class, tags={ "vcf", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "network copied", response = NetworkInventoryItem.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 403, message = "The current user is forbidden from accessing this data") })
    @RequestMapping(value = "/drivergenes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<NetworkInventoryItem> createOverviewNetwork(@ApiParam(value = "The genes of interest, aka. the driver genes, to build a driver gene network with based on the network with uuid 'baseNetworkUUID'. If 'baseNetworkUUID' is omitted, the default network will be used." ,required=true )  @Valid @RequestBody Drivergenes drivergenes
,@ApiParam(value = "The user which requests the creation" ,required=true) @RequestHeader(value="user", required=true) String user
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"relationTypes\" : [ \"stimulation\", \"stimulation\" ],\n  \"name\" : \"Example Network\",\n  \"organismCode\" : \"hsa\",\n  \"links\" : [ {\n    \"rel\" : \"graphml\",\n    \"href\" : \"http://example.com:8080/sbml4j/networks/d25f4b9-8dd5-4bc3-9d04-9af418302244?format=graphml\"\n  }, {\n    \"rel\" : \"graphml\",\n    \"href\" : \"http://example.com:8080/sbml4j/networks/d25f4b9-8dd5-4bc3-9d04-9af418302244?format=graphml\"\n  } ],\n  \"numberOfNodes\" : 0,\n  \"numberOfRelations\" : 6,\n  \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ],\n  \"networkMappingType\" : \"REGULATORY\"\n}", NetworkInventoryItem.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default VcfApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
